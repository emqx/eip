@startuml

actor Subscriber as sub
participant Connection as subcon
participant Broker as broker
database Mnesia as mnesia
database External as external
participant Writer as writer
participant Connection as pubcon
actor Publisher as pub

== Clean start ==
sub -> subcon : Connect\n(Session-Expiry > 0,\nClean-Start: 1)
subcon -> mnesia : Register sessionID
subcon -> external : Clean start

== Subscribe ==
sub -> subcon : Subscribe
subcon -> mnesia : Store topic filter in trie\nand session table
subcon -> sub : suback

== Publish ==
pub -> pubcon : publish
pubcon -> mnesia : lookup topic in trie for\npersistent session
pubcon -> writer : message
writer -> broker : message
writer -> mnesia : lookup sessionID
rnote over pubcon
  Still responsive
endrnote
broker -> subcon : message
writer -> external : persist message
subcon -> sub : message
writer -> pubcon : ack
pubcon -> pub : puback
subcon -> mnesia : mark as delivered


== Persistent resume (connection gone) ==
sub -> subcon : Connect\n(Session-Expiry > 0,\nClean-Start: 0)
subcon -> mnesia : Register sessionID
subcon -> mnesia : Get state
group Recovery state machine
  subcon -> external : Get all pending messages
  subcon -> sub : Pending messages
  subcon -> mnesia : Mark as delivered
  subcon -> broker : Subscribe to topics (transaction)
  group For all writers in parallel
    subcon -> writer : Sync marker
    rnote over subcon
      Drop all incoming messages from writer
      These messages will eventually come
      from the DB
    end rnote
    writer -> subcon : Sync marker
    group Wait (poll) for marker in DB (in pending messages)
      rnote over subcon
        Buffer messages from writer
      end rnote
      subcon -> mnesia : Get pending messages from writer
      subcon -> sub : pending messages
      subcon -> mnesia : Mark as delivered
    end group
    writer -> mnesia : Sync marker
    mnesia -> subcon : Sync marker
    subcon -> sub : buffered messages from writer
    subcon -> mnesia : Mark as delivered
  end group
  rnote over subcon
    Normal operations
  end rnote

@enduml
